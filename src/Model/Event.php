<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SignRequest API
 *
 * API for SignRequest.com
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SignRequest\Model;

use \ArrayAccess;
use \SignRequest\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Event implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'status' => 'string',
        'event_type' => 'string',
        'delivered' => 'bool',
        'delivered_on' => '\DateTime',
        'callback_status_code' => 'int',
        'timestamp' => '\DateTime',
        'team' => '\SignRequest\Model\DocumentTeam',
        'document' => '\SignRequest\Model\Document',
        'signer' => '\SignRequest\Model\Signer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'status' => null,
        'event_type' => null,
        'delivered' => null,
        'delivered_on' => 'date-time',
        'callback_status_code' => null,
        'timestamp' => 'date-time',
        'team' => null,
        'document' => null,
        'signer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'status' => 'status',
        'event_type' => 'event_type',
        'delivered' => 'delivered',
        'delivered_on' => 'delivered_on',
        'callback_status_code' => 'callback_status_code',
        'timestamp' => 'timestamp',
        'team' => 'team',
        'document' => 'document',
        'signer' => 'signer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'status' => 'setStatus',
        'event_type' => 'setEventType',
        'delivered' => 'setDelivered',
        'delivered_on' => 'setDeliveredOn',
        'callback_status_code' => 'setCallbackStatusCode',
        'timestamp' => 'setTimestamp',
        'team' => 'setTeam',
        'document' => 'setDocument',
        'signer' => 'setSigner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'status' => 'getStatus',
        'event_type' => 'getEventType',
        'delivered' => 'getDelivered',
        'delivered_on' => 'getDeliveredOn',
        'callback_status_code' => 'getCallbackStatusCode',
        'timestamp' => 'getTimestamp',
        'team' => 'getTeam',
        'document' => 'getDocument',
        'signer' => 'getSigner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_OK = 'ok';
    const STATUS_ERROR = 'error';
    const EVENT_TYPE_CONVERT_ERROR = 'convert_error';
    const EVENT_TYPE_CONVERTED = 'converted';
    const EVENT_TYPE_SENDING_ERROR = 'sending_error';
    const EVENT_TYPE_SENT = 'sent';
    const EVENT_TYPE_DECLINED = 'declined';
    const EVENT_TYPE_CANCELLED = 'cancelled';
    const EVENT_TYPE_EXPIRED = 'expired';
    const EVENT_TYPE_SIGNED = 'signed';
    const EVENT_TYPE_VIEWED = 'viewed';
    const EVENT_TYPE_DOWNLOADED = 'downloaded';
    const EVENT_TYPE_SIGNER_SIGNED = 'signer_signed';
    const EVENT_TYPE_SIGNER_EMAIL_BOUNCED = 'signer_email_bounced';
    const EVENT_TYPE_SIGNER_VIEWED_EMAIL = 'signer_viewed_email';
    const EVENT_TYPE_SIGNER_VIEWED = 'signer_viewed';
    const EVENT_TYPE_SIGNER_FORWARDED = 'signer_forwarded';
    const EVENT_TYPE_SIGNER_DOWNLOADED = 'signer_downloaded';
    const EVENT_TYPE_SIGNREQUEST_RECEIVED = 'signrequest_received';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OK,
            self::STATUS_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_CONVERT_ERROR,
            self::EVENT_TYPE_CONVERTED,
            self::EVENT_TYPE_SENDING_ERROR,
            self::EVENT_TYPE_SENT,
            self::EVENT_TYPE_DECLINED,
            self::EVENT_TYPE_CANCELLED,
            self::EVENT_TYPE_EXPIRED,
            self::EVENT_TYPE_SIGNED,
            self::EVENT_TYPE_VIEWED,
            self::EVENT_TYPE_DOWNLOADED,
            self::EVENT_TYPE_SIGNER_SIGNED,
            self::EVENT_TYPE_SIGNER_EMAIL_BOUNCED,
            self::EVENT_TYPE_SIGNER_VIEWED_EMAIL,
            self::EVENT_TYPE_SIGNER_VIEWED,
            self::EVENT_TYPE_SIGNER_FORWARDED,
            self::EVENT_TYPE_SIGNER_DOWNLOADED,
            self::EVENT_TYPE_SIGNREQUEST_RECEIVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['delivered'] = isset($data['delivered']) ? $data['delivered'] : null;
        $this->container['delivered_on'] = isset($data['delivered_on']) ? $data['delivered_on'] : null;
        $this->container['callback_status_code'] = isset($data['callback_status_code']) ? $data['callback_status_code'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['signer'] = isset($data['signer']) ? $data['signer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['event_type']) && !in_array($this->container['event_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling Event., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type event_type
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($event_type) && !in_array($event_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return bool
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param bool $delivered delivered
     *
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets delivered_on
     *
     * @return \DateTime
     */
    public function getDeliveredOn()
    {
        return $this->container['delivered_on'];
    }

    /**
     * Sets delivered_on
     *
     * @param \DateTime $delivered_on delivered_on
     *
     * @return $this
     */
    public function setDeliveredOn($delivered_on)
    {
        $this->container['delivered_on'] = $delivered_on;

        return $this;
    }

    /**
     * Gets callback_status_code
     *
     * @return int
     */
    public function getCallbackStatusCode()
    {
        return $this->container['callback_status_code'];
    }

    /**
     * Sets callback_status_code
     *
     * @param int $callback_status_code callback_status_code
     *
     * @return $this
     */
    public function setCallbackStatusCode($callback_status_code)
    {
        $this->container['callback_status_code'] = $callback_status_code;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \SignRequest\Model\DocumentTeam
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \SignRequest\Model\DocumentTeam $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \SignRequest\Model\Document
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \SignRequest\Model\Document $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets signer
     *
     * @return \SignRequest\Model\Signer
     */
    public function getSigner()
    {
        return $this->container['signer'];
    }

    /**
     * Sets signer
     *
     * @param \SignRequest\Model\Signer $signer signer
     *
     * @return $this
     */
    public function setSigner($signer)
    {
        $this->container['signer'] = $signer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


