<?php
/**
 * Signer
 *
 * PHP version 5
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SignRequest API
 *
 * API for SignRequest.com
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SignRequest\Model;

use \ArrayAccess;
use \SignRequest\ObjectSerializer;

/**
 * Signer Class Doc Comment
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Signer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Signer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'display_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email_viewed' => 'bool',
        'viewed' => 'bool',
        'signed' => 'bool',
        'downloaded' => 'bool',
        'signed_on' => '\DateTime',
        'needs_to_sign' => 'bool',
        'approve_only' => 'bool',
        'notify_only' => 'bool',
        'in_person' => 'bool',
        'order' => 'int',
        'language' => 'string',
        'force_language' => 'bool',
        'emailed' => 'bool',
        'verify_phone_number' => 'string',
        'verify_bank_account' => 'string',
        'declined' => 'bool',
        'declined_on' => '\DateTime',
        'forwarded' => 'string',
        'forwarded_on' => '\DateTime',
        'forwarded_to_email' => 'string',
        'forwarded_reason' => 'string',
        'message' => 'string',
        'embed_url_user_id' => 'string',
        'inputs' => '\SignRequest\Model\SignerInputs[]',
        'use_stamp_for_approve_only' => 'bool',
        'embed_url' => 'string',
        'attachments' => '\SignRequest\Model\SignerAttachment[]',
        'redirect_url' => 'string',
        'redirect_url_declined' => 'string',
        'after_document' => 'string',
        'integrations' => '\SignRequest\Model\InlineDocumentSignerIntegrationData[]',
        'password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => 'email',
        'display_name' => null,
        'first_name' => null,
        'last_name' => null,
        'email_viewed' => null,
        'viewed' => null,
        'signed' => null,
        'downloaded' => null,
        'signed_on' => 'date-time',
        'needs_to_sign' => null,
        'approve_only' => null,
        'notify_only' => null,
        'in_person' => null,
        'order' => null,
        'language' => null,
        'force_language' => null,
        'emailed' => null,
        'verify_phone_number' => null,
        'verify_bank_account' => null,
        'declined' => null,
        'declined_on' => 'date-time',
        'forwarded' => null,
        'forwarded_on' => 'date-time',
        'forwarded_to_email' => 'email',
        'forwarded_reason' => null,
        'message' => null,
        'embed_url_user_id' => null,
        'inputs' => null,
        'use_stamp_for_approve_only' => null,
        'embed_url' => 'uri',
        'attachments' => null,
        'redirect_url' => 'uri',
        'redirect_url_declined' => 'uri',
        'after_document' => 'uri',
        'integrations' => null,
        'password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'display_name' => 'display_name',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email_viewed' => 'email_viewed',
        'viewed' => 'viewed',
        'signed' => 'signed',
        'downloaded' => 'downloaded',
        'signed_on' => 'signed_on',
        'needs_to_sign' => 'needs_to_sign',
        'approve_only' => 'approve_only',
        'notify_only' => 'notify_only',
        'in_person' => 'in_person',
        'order' => 'order',
        'language' => 'language',
        'force_language' => 'force_language',
        'emailed' => 'emailed',
        'verify_phone_number' => 'verify_phone_number',
        'verify_bank_account' => 'verify_bank_account',
        'declined' => 'declined',
        'declined_on' => 'declined_on',
        'forwarded' => 'forwarded',
        'forwarded_on' => 'forwarded_on',
        'forwarded_to_email' => 'forwarded_to_email',
        'forwarded_reason' => 'forwarded_reason',
        'message' => 'message',
        'embed_url_user_id' => 'embed_url_user_id',
        'inputs' => 'inputs',
        'use_stamp_for_approve_only' => 'use_stamp_for_approve_only',
        'embed_url' => 'embed_url',
        'attachments' => 'attachments',
        'redirect_url' => 'redirect_url',
        'redirect_url_declined' => 'redirect_url_declined',
        'after_document' => 'after_document',
        'integrations' => 'integrations',
        'password' => 'password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'display_name' => 'setDisplayName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email_viewed' => 'setEmailViewed',
        'viewed' => 'setViewed',
        'signed' => 'setSigned',
        'downloaded' => 'setDownloaded',
        'signed_on' => 'setSignedOn',
        'needs_to_sign' => 'setNeedsToSign',
        'approve_only' => 'setApproveOnly',
        'notify_only' => 'setNotifyOnly',
        'in_person' => 'setInPerson',
        'order' => 'setOrder',
        'language' => 'setLanguage',
        'force_language' => 'setForceLanguage',
        'emailed' => 'setEmailed',
        'verify_phone_number' => 'setVerifyPhoneNumber',
        'verify_bank_account' => 'setVerifyBankAccount',
        'declined' => 'setDeclined',
        'declined_on' => 'setDeclinedOn',
        'forwarded' => 'setForwarded',
        'forwarded_on' => 'setForwardedOn',
        'forwarded_to_email' => 'setForwardedToEmail',
        'forwarded_reason' => 'setForwardedReason',
        'message' => 'setMessage',
        'embed_url_user_id' => 'setEmbedUrlUserId',
        'inputs' => 'setInputs',
        'use_stamp_for_approve_only' => 'setUseStampForApproveOnly',
        'embed_url' => 'setEmbedUrl',
        'attachments' => 'setAttachments',
        'redirect_url' => 'setRedirectUrl',
        'redirect_url_declined' => 'setRedirectUrlDeclined',
        'after_document' => 'setAfterDocument',
        'integrations' => 'setIntegrations',
        'password' => 'setPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'display_name' => 'getDisplayName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email_viewed' => 'getEmailViewed',
        'viewed' => 'getViewed',
        'signed' => 'getSigned',
        'downloaded' => 'getDownloaded',
        'signed_on' => 'getSignedOn',
        'needs_to_sign' => 'getNeedsToSign',
        'approve_only' => 'getApproveOnly',
        'notify_only' => 'getNotifyOnly',
        'in_person' => 'getInPerson',
        'order' => 'getOrder',
        'language' => 'getLanguage',
        'force_language' => 'getForceLanguage',
        'emailed' => 'getEmailed',
        'verify_phone_number' => 'getVerifyPhoneNumber',
        'verify_bank_account' => 'getVerifyBankAccount',
        'declined' => 'getDeclined',
        'declined_on' => 'getDeclinedOn',
        'forwarded' => 'getForwarded',
        'forwarded_on' => 'getForwardedOn',
        'forwarded_to_email' => 'getForwardedToEmail',
        'forwarded_reason' => 'getForwardedReason',
        'message' => 'getMessage',
        'embed_url_user_id' => 'getEmbedUrlUserId',
        'inputs' => 'getInputs',
        'use_stamp_for_approve_only' => 'getUseStampForApproveOnly',
        'embed_url' => 'getEmbedUrl',
        'attachments' => 'getAttachments',
        'redirect_url' => 'getRedirectUrl',
        'redirect_url_declined' => 'getRedirectUrlDeclined',
        'after_document' => 'getAfterDocument',
        'integrations' => 'getIntegrations',
        'password' => 'getPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANGUAGE_EN = 'en';
    const LANGUAGE_EN_GB = 'en-gb';
    const LANGUAGE_NL = 'nl';
    const LANGUAGE_FR = 'fr';
    const LANGUAGE_DE = 'de';
    const LANGUAGE_HE = 'he';
    const LANGUAGE_DA = 'da';
    const LANGUAGE_FI = 'fi';
    const LANGUAGE_HU = 'hu';
    const LANGUAGE_IT = 'it';
    const LANGUAGE_NO = 'no';
    const LANGUAGE_PL = 'pl';
    const LANGUAGE_PT = 'pt';
    const LANGUAGE_ES = 'es';
    const LANGUAGE_SV = 'sv';
    const LANGUAGE_RU = 'ru';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_EN,
            self::LANGUAGE_EN_GB,
            self::LANGUAGE_NL,
            self::LANGUAGE_FR,
            self::LANGUAGE_DE,
            self::LANGUAGE_HE,
            self::LANGUAGE_DA,
            self::LANGUAGE_FI,
            self::LANGUAGE_HU,
            self::LANGUAGE_IT,
            self::LANGUAGE_NO,
            self::LANGUAGE_PL,
            self::LANGUAGE_PT,
            self::LANGUAGE_ES,
            self::LANGUAGE_SV,
            self::LANGUAGE_RU,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email_viewed'] = isset($data['email_viewed']) ? $data['email_viewed'] : null;
        $this->container['viewed'] = isset($data['viewed']) ? $data['viewed'] : null;
        $this->container['signed'] = isset($data['signed']) ? $data['signed'] : null;
        $this->container['downloaded'] = isset($data['downloaded']) ? $data['downloaded'] : null;
        $this->container['signed_on'] = isset($data['signed_on']) ? $data['signed_on'] : null;
        $this->container['needs_to_sign'] = isset($data['needs_to_sign']) ? $data['needs_to_sign'] : true;
        $this->container['approve_only'] = isset($data['approve_only']) ? $data['approve_only'] : null;
        $this->container['notify_only'] = isset($data['notify_only']) ? $data['notify_only'] : null;
        $this->container['in_person'] = isset($data['in_person']) ? $data['in_person'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['force_language'] = isset($data['force_language']) ? $data['force_language'] : null;
        $this->container['emailed'] = isset($data['emailed']) ? $data['emailed'] : null;
        $this->container['verify_phone_number'] = isset($data['verify_phone_number']) ? $data['verify_phone_number'] : null;
        $this->container['verify_bank_account'] = isset($data['verify_bank_account']) ? $data['verify_bank_account'] : null;
        $this->container['declined'] = isset($data['declined']) ? $data['declined'] : null;
        $this->container['declined_on'] = isset($data['declined_on']) ? $data['declined_on'] : null;
        $this->container['forwarded'] = isset($data['forwarded']) ? $data['forwarded'] : null;
        $this->container['forwarded_on'] = isset($data['forwarded_on']) ? $data['forwarded_on'] : null;
        $this->container['forwarded_to_email'] = isset($data['forwarded_to_email']) ? $data['forwarded_to_email'] : null;
        $this->container['forwarded_reason'] = isset($data['forwarded_reason']) ? $data['forwarded_reason'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['embed_url_user_id'] = isset($data['embed_url_user_id']) ? $data['embed_url_user_id'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['use_stamp_for_approve_only'] = isset($data['use_stamp_for_approve_only']) ? $data['use_stamp_for_approve_only'] : null;
        $this->container['embed_url'] = isset($data['embed_url']) ? $data['embed_url'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['redirect_url'] = isset($data['redirect_url']) ? $data['redirect_url'] : null;
        $this->container['redirect_url_declined'] = isset($data['redirect_url_declined']) ? $data['redirect_url_declined'] : null;
        $this->container['after_document'] = isset($data['after_document']) ? $data['after_document'] : null;
        $this->container['integrations'] = isset($data['integrations']) ? $data['integrations'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['order']) && ($this->container['order'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'order', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['order']) && ($this->container['order'] < 0)) {
            $invalidProperties[] = "invalid value for 'order', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['verify_phone_number']) && (mb_strlen($this->container['verify_phone_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'verify_phone_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['verify_bank_account']) && (mb_strlen($this->container['verify_bank_account']) > 255)) {
            $invalidProperties[] = "invalid value for 'verify_bank_account', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['forwarded_to_email']) && (mb_strlen($this->container['forwarded_to_email']) < 1)) {
            $invalidProperties[] = "invalid value for 'forwarded_to_email', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['forwarded_reason']) && (mb_strlen($this->container['forwarded_reason']) < 1)) {
            $invalidProperties[] = "invalid value for 'forwarded_reason', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['message']) && (mb_strlen($this->container['message']) < 1)) {
            $invalidProperties[] = "invalid value for 'message', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['embed_url_user_id']) && (mb_strlen($this->container['embed_url_user_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'embed_url_user_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['embed_url']) && (mb_strlen($this->container['embed_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'embed_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['redirect_url']) && (mb_strlen($this->container['redirect_url']) > 2100)) {
            $invalidProperties[] = "invalid value for 'redirect_url', the character length must be smaller than or equal to 2100.";
        }

        if (!is_null($this->container['redirect_url_declined']) && (mb_strlen($this->container['redirect_url_declined']) > 2100)) {
            $invalidProperties[] = "invalid value for 'redirect_url_declined', the character length must be smaller than or equal to 2100.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Signer., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Signer., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {

        if (!is_null($display_name) && (mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling Signer., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Signer., must be smaller than or equal to 255.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Signer., must be smaller than or equal to 255.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email_viewed
     *
     * @return bool
     */
    public function getEmailViewed()
    {
        return $this->container['email_viewed'];
    }

    /**
     * Sets email_viewed
     *
     * @param bool $email_viewed email_viewed
     *
     * @return $this
     */
    public function setEmailViewed($email_viewed)
    {
        $this->container['email_viewed'] = $email_viewed;

        return $this;
    }

    /**
     * Gets viewed
     *
     * @return bool
     */
    public function getViewed()
    {
        return $this->container['viewed'];
    }

    /**
     * Sets viewed
     *
     * @param bool $viewed viewed
     *
     * @return $this
     */
    public function setViewed($viewed)
    {
        $this->container['viewed'] = $viewed;

        return $this;
    }

    /**
     * Gets signed
     *
     * @return bool
     */
    public function getSigned()
    {
        return $this->container['signed'];
    }

    /**
     * Sets signed
     *
     * @param bool $signed signed
     *
     * @return $this
     */
    public function setSigned($signed)
    {
        $this->container['signed'] = $signed;

        return $this;
    }

    /**
     * Gets downloaded
     *
     * @return bool
     */
    public function getDownloaded()
    {
        return $this->container['downloaded'];
    }

    /**
     * Sets downloaded
     *
     * @param bool $downloaded downloaded
     *
     * @return $this
     */
    public function setDownloaded($downloaded)
    {
        $this->container['downloaded'] = $downloaded;

        return $this;
    }

    /**
     * Gets signed_on
     *
     * @return \DateTime
     */
    public function getSignedOn()
    {
        return $this->container['signed_on'];
    }

    /**
     * Sets signed_on
     *
     * @param \DateTime $signed_on signed_on
     *
     * @return $this
     */
    public function setSignedOn($signed_on)
    {
        $this->container['signed_on'] = $signed_on;

        return $this;
    }

    /**
     * Gets needs_to_sign
     *
     * @return bool
     */
    public function getNeedsToSign()
    {
        return $this->container['needs_to_sign'];
    }

    /**
     * Sets needs_to_sign
     *
     * @param bool $needs_to_sign When `false` user does not need to sign, but will receive a copy of the signed document and signing log, see: [Copy only](#section/Additional-signing-methods/Copy-only)
     *
     * @return $this
     */
    public function setNeedsToSign($needs_to_sign)
    {
        $this->container['needs_to_sign'] = $needs_to_sign;

        return $this;
    }

    /**
     * Gets approve_only
     *
     * @return bool
     */
    public function getApproveOnly()
    {
        return $this->container['approve_only'];
    }

    /**
     * Sets approve_only
     *
     * @param bool $approve_only Require user to approve the document (without adding a signature), see: [Approve only](#section/Additional-signing-methods/Approve-only)
     *
     * @return $this
     */
    public function setApproveOnly($approve_only)
    {
        $this->container['approve_only'] = $approve_only;

        return $this;
    }

    /**
     * Gets notify_only
     *
     * @return bool
     */
    public function getNotifyOnly()
    {
        return $this->container['notify_only'];
    }

    /**
     * Sets notify_only
     *
     * @param bool $notify_only Send notifications about the document and a copy of the signed document and signing log, but don't require them to take any action, see: [Notify only](#section/Additional-signing-methods/Notify-only)
     *
     * @return $this
     */
    public function setNotifyOnly($notify_only)
    {
        $this->container['notify_only'] = $notify_only;

        return $this;
    }

    /**
     * Gets in_person
     *
     * @return bool
     */
    public function getInPerson()
    {
        return $this->container['in_person'];
    }

    /**
     * Sets in_person
     *
     * @param bool $in_person When used in combination with an embed url on the sender, after sender has signed, they will be redirected to the next `in_person` signer, see: [In person signing](#section/Additional-signing-methods/In-person-signing)
     *
     * @return $this
     */
    public function setInPerson($in_person)
    {
        $this->container['in_person'] = $in_person;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {

        if (!is_null($order) && ($order > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $order when calling Signer., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($order) && ($order < 0)) {
            throw new \InvalidArgumentException('invalid value for $order when calling Signer., must be bigger than or equal to 0.');
        }

        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets force_language
     *
     * @return bool
     */
    public function getForceLanguage()
    {
        return $this->container['force_language'];
    }

    /**
     * Sets force_language
     *
     * @param bool $force_language force_language
     *
     * @return $this
     */
    public function setForceLanguage($force_language)
    {
        $this->container['force_language'] = $force_language;

        return $this;
    }

    /**
     * Gets emailed
     *
     * @return bool
     */
    public function getEmailed()
    {
        return $this->container['emailed'];
    }

    /**
     * Sets emailed
     *
     * @param bool $emailed emailed
     *
     * @return $this
     */
    public function setEmailed($emailed)
    {
        $this->container['emailed'] = $emailed;

        return $this;
    }

    /**
     * Gets verify_phone_number
     *
     * @return string
     */
    public function getVerifyPhoneNumber()
    {
        return $this->container['verify_phone_number'];
    }

    /**
     * Sets verify_phone_number
     *
     * @param string $verify_phone_number verify_phone_number
     *
     * @return $this
     */
    public function setVerifyPhoneNumber($verify_phone_number)
    {
        if (!is_null($verify_phone_number) && (mb_strlen($verify_phone_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $verify_phone_number when calling Signer., must be smaller than or equal to 255.');
        }

        $this->container['verify_phone_number'] = $verify_phone_number;

        return $this;
    }

    /**
     * Gets verify_bank_account
     *
     * @return string
     */
    public function getVerifyBankAccount()
    {
        return $this->container['verify_bank_account'];
    }

    /**
     * Sets verify_bank_account
     *
     * @param string $verify_bank_account verify_bank_account
     *
     * @return $this
     */
    public function setVerifyBankAccount($verify_bank_account)
    {
        if (!is_null($verify_bank_account) && (mb_strlen($verify_bank_account) > 255)) {
            throw new \InvalidArgumentException('invalid length for $verify_bank_account when calling Signer., must be smaller than or equal to 255.');
        }

        $this->container['verify_bank_account'] = $verify_bank_account;

        return $this;
    }

    /**
     * Gets declined
     *
     * @return bool
     */
    public function getDeclined()
    {
        return $this->container['declined'];
    }

    /**
     * Sets declined
     *
     * @param bool $declined declined
     *
     * @return $this
     */
    public function setDeclined($declined)
    {
        $this->container['declined'] = $declined;

        return $this;
    }

    /**
     * Gets declined_on
     *
     * @return \DateTime
     */
    public function getDeclinedOn()
    {
        return $this->container['declined_on'];
    }

    /**
     * Sets declined_on
     *
     * @param \DateTime $declined_on declined_on
     *
     * @return $this
     */
    public function setDeclinedOn($declined_on)
    {
        $this->container['declined_on'] = $declined_on;

        return $this;
    }

    /**
     * Gets forwarded
     *
     * @return string
     */
    public function getForwarded()
    {
        return $this->container['forwarded'];
    }

    /**
     * Sets forwarded
     *
     * @param string $forwarded forwarded
     *
     * @return $this
     */
    public function setForwarded($forwarded)
    {
        $this->container['forwarded'] = $forwarded;

        return $this;
    }

    /**
     * Gets forwarded_on
     *
     * @return \DateTime
     */
    public function getForwardedOn()
    {
        return $this->container['forwarded_on'];
    }

    /**
     * Sets forwarded_on
     *
     * @param \DateTime $forwarded_on forwarded_on
     *
     * @return $this
     */
    public function setForwardedOn($forwarded_on)
    {
        $this->container['forwarded_on'] = $forwarded_on;

        return $this;
    }

    /**
     * Gets forwarded_to_email
     *
     * @return string
     */
    public function getForwardedToEmail()
    {
        return $this->container['forwarded_to_email'];
    }

    /**
     * Sets forwarded_to_email
     *
     * @param string $forwarded_to_email forwarded_to_email
     *
     * @return $this
     */
    public function setForwardedToEmail($forwarded_to_email)
    {

        if (!is_null($forwarded_to_email) && (mb_strlen($forwarded_to_email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $forwarded_to_email when calling Signer., must be bigger than or equal to 1.');
        }

        $this->container['forwarded_to_email'] = $forwarded_to_email;

        return $this;
    }

    /**
     * Gets forwarded_reason
     *
     * @return string
     */
    public function getForwardedReason()
    {
        return $this->container['forwarded_reason'];
    }

    /**
     * Sets forwarded_reason
     *
     * @param string $forwarded_reason forwarded_reason
     *
     * @return $this
     */
    public function setForwardedReason($forwarded_reason)
    {

        if (!is_null($forwarded_reason) && (mb_strlen($forwarded_reason) < 1)) {
            throw new \InvalidArgumentException('invalid length for $forwarded_reason when calling Signer., must be bigger than or equal to 1.');
        }

        $this->container['forwarded_reason'] = $forwarded_reason;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {

        if (!is_null($message) && (mb_strlen($message) < 1)) {
            throw new \InvalidArgumentException('invalid length for $message when calling Signer., must be bigger than or equal to 1.');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets embed_url_user_id
     *
     * @return string
     */
    public function getEmbedUrlUserId()
    {
        return $this->container['embed_url_user_id'];
    }

    /**
     * Sets embed_url_user_id
     *
     * @param string $embed_url_user_id embed_url_user_id
     *
     * @return $this
     */
    public function setEmbedUrlUserId($embed_url_user_id)
    {
        if (!is_null($embed_url_user_id) && (mb_strlen($embed_url_user_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $embed_url_user_id when calling Signer., must be smaller than or equal to 255.');
        }

        $this->container['embed_url_user_id'] = $embed_url_user_id;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \SignRequest\Model\SignerInputs[]
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \SignRequest\Model\SignerInputs[] $inputs inputs
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets use_stamp_for_approve_only
     *
     * @return bool
     */
    public function getUseStampForApproveOnly()
    {
        return $this->container['use_stamp_for_approve_only'];
    }

    /**
     * Sets use_stamp_for_approve_only
     *
     * @param bool $use_stamp_for_approve_only Place an approval stamp on a document when a signer approves a document
     *
     * @return $this
     */
    public function setUseStampForApproveOnly($use_stamp_for_approve_only)
    {
        $this->container['use_stamp_for_approve_only'] = $use_stamp_for_approve_only;

        return $this;
    }

    /**
     * Gets embed_url
     *
     * @return string
     */
    public function getEmbedUrl()
    {
        return $this->container['embed_url'];
    }

    /**
     * Sets embed_url
     *
     * @param string $embed_url embed_url
     *
     * @return $this
     */
    public function setEmbedUrl($embed_url)
    {

        if (!is_null($embed_url) && (mb_strlen($embed_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $embed_url when calling Signer., must be bigger than or equal to 1.');
        }

        $this->container['embed_url'] = $embed_url;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \SignRequest\Model\SignerAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \SignRequest\Model\SignerAttachment[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url redirect_url
     *
     * @return $this
     */
    public function setRedirectUrl($redirect_url)
    {
        if (!is_null($redirect_url) && (mb_strlen($redirect_url) > 2100)) {
            throw new \InvalidArgumentException('invalid length for $redirect_url when calling Signer., must be smaller than or equal to 2100.');
        }

        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets redirect_url_declined
     *
     * @return string
     */
    public function getRedirectUrlDeclined()
    {
        return $this->container['redirect_url_declined'];
    }

    /**
     * Sets redirect_url_declined
     *
     * @param string $redirect_url_declined redirect_url_declined
     *
     * @return $this
     */
    public function setRedirectUrlDeclined($redirect_url_declined)
    {
        if (!is_null($redirect_url_declined) && (mb_strlen($redirect_url_declined) > 2100)) {
            throw new \InvalidArgumentException('invalid length for $redirect_url_declined when calling Signer., must be smaller than or equal to 2100.');
        }

        $this->container['redirect_url_declined'] = $redirect_url_declined;

        return $this;
    }

    /**
     * Gets after_document
     *
     * @return string
     */
    public function getAfterDocument()
    {
        return $this->container['after_document'];
    }

    /**
     * Sets after_document
     *
     * @param string $after_document after_document
     *
     * @return $this
     */
    public function setAfterDocument($after_document)
    {
        $this->container['after_document'] = $after_document;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return \SignRequest\Model\InlineDocumentSignerIntegrationData[]
     */
    public function getIntegrations()
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param \SignRequest\Model\InlineDocumentSignerIntegrationData[] $integrations integrations
     *
     * @return $this
     */
    public function setIntegrations($integrations)
    {
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Require the signer to enter this password before signing a document. This field is write only.
     *
     * @return $this
     */
    public function setPassword($password)
    {

        if (!is_null($password) && (mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling Signer., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


