<?php
/**
 * DocumentSignrequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SignRequest API
 *
 * API for SignRequest.com
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SignRequest\Model;

use \ArrayAccess;
use \SignRequest\ObjectSerializer;

/**
 * DocumentSignrequest Class Doc Comment
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentSignrequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Document_signrequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_email' => 'string',
        'from_email_name' => 'string',
        'is_being_prepared' => 'bool',
        'prepare_url' => 'string',
        'redirect_url' => 'string',
        'redirect_url_declined' => 'string',
        'required_attachments' => '\SignRequest\Model\RequiredAttachment[]',
        'disable_attachments' => 'bool',
        'disable_text_signatures' => 'bool',
        'disable_text' => 'bool',
        'disable_date' => 'bool',
        'disable_emails' => 'bool',
        'disable_upload_signatures' => 'bool',
        'disable_blockchain_proof' => 'bool',
        'text_message_verification_locked' => 'bool',
        'subject' => 'string',
        'message' => 'string',
        'who' => 'string',
        'send_reminders' => 'bool',
        'signers' => '\SignRequest\Model\Signer[]',
        'uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_email' => 'email',
        'from_email_name' => null,
        'is_being_prepared' => null,
        'prepare_url' => 'uri',
        'redirect_url' => 'uri',
        'redirect_url_declined' => 'uri',
        'required_attachments' => null,
        'disable_attachments' => null,
        'disable_text_signatures' => null,
        'disable_text' => null,
        'disable_date' => null,
        'disable_emails' => null,
        'disable_upload_signatures' => null,
        'disable_blockchain_proof' => null,
        'text_message_verification_locked' => null,
        'subject' => null,
        'message' => null,
        'who' => null,
        'send_reminders' => null,
        'signers' => null,
        'uuid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_email' => 'from_email',
        'from_email_name' => 'from_email_name',
        'is_being_prepared' => 'is_being_prepared',
        'prepare_url' => 'prepare_url',
        'redirect_url' => 'redirect_url',
        'redirect_url_declined' => 'redirect_url_declined',
        'required_attachments' => 'required_attachments',
        'disable_attachments' => 'disable_attachments',
        'disable_text_signatures' => 'disable_text_signatures',
        'disable_text' => 'disable_text',
        'disable_date' => 'disable_date',
        'disable_emails' => 'disable_emails',
        'disable_upload_signatures' => 'disable_upload_signatures',
        'disable_blockchain_proof' => 'disable_blockchain_proof',
        'text_message_verification_locked' => 'text_message_verification_locked',
        'subject' => 'subject',
        'message' => 'message',
        'who' => 'who',
        'send_reminders' => 'send_reminders',
        'signers' => 'signers',
        'uuid' => 'uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_email' => 'setFromEmail',
        'from_email_name' => 'setFromEmailName',
        'is_being_prepared' => 'setIsBeingPrepared',
        'prepare_url' => 'setPrepareUrl',
        'redirect_url' => 'setRedirectUrl',
        'redirect_url_declined' => 'setRedirectUrlDeclined',
        'required_attachments' => 'setRequiredAttachments',
        'disable_attachments' => 'setDisableAttachments',
        'disable_text_signatures' => 'setDisableTextSignatures',
        'disable_text' => 'setDisableText',
        'disable_date' => 'setDisableDate',
        'disable_emails' => 'setDisableEmails',
        'disable_upload_signatures' => 'setDisableUploadSignatures',
        'disable_blockchain_proof' => 'setDisableBlockchainProof',
        'text_message_verification_locked' => 'setTextMessageVerificationLocked',
        'subject' => 'setSubject',
        'message' => 'setMessage',
        'who' => 'setWho',
        'send_reminders' => 'setSendReminders',
        'signers' => 'setSigners',
        'uuid' => 'setUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_email' => 'getFromEmail',
        'from_email_name' => 'getFromEmailName',
        'is_being_prepared' => 'getIsBeingPrepared',
        'prepare_url' => 'getPrepareUrl',
        'redirect_url' => 'getRedirectUrl',
        'redirect_url_declined' => 'getRedirectUrlDeclined',
        'required_attachments' => 'getRequiredAttachments',
        'disable_attachments' => 'getDisableAttachments',
        'disable_text_signatures' => 'getDisableTextSignatures',
        'disable_text' => 'getDisableText',
        'disable_date' => 'getDisableDate',
        'disable_emails' => 'getDisableEmails',
        'disable_upload_signatures' => 'getDisableUploadSignatures',
        'disable_blockchain_proof' => 'getDisableBlockchainProof',
        'text_message_verification_locked' => 'getTextMessageVerificationLocked',
        'subject' => 'getSubject',
        'message' => 'getMessage',
        'who' => 'getWho',
        'send_reminders' => 'getSendReminders',
        'signers' => 'getSigners',
        'uuid' => 'getUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WHO_M = 'm';
    const WHO_MO = 'mo';
    const WHO_O = 'o';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoAllowableValues()
    {
        return [
            self::WHO_M,
            self::WHO_MO,
            self::WHO_O,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_email'] = isset($data['from_email']) ? $data['from_email'] : null;
        $this->container['from_email_name'] = isset($data['from_email_name']) ? $data['from_email_name'] : null;
        $this->container['is_being_prepared'] = isset($data['is_being_prepared']) ? $data['is_being_prepared'] : null;
        $this->container['prepare_url'] = isset($data['prepare_url']) ? $data['prepare_url'] : null;
        $this->container['redirect_url'] = isset($data['redirect_url']) ? $data['redirect_url'] : null;
        $this->container['redirect_url_declined'] = isset($data['redirect_url_declined']) ? $data['redirect_url_declined'] : null;
        $this->container['required_attachments'] = isset($data['required_attachments']) ? $data['required_attachments'] : null;
        $this->container['disable_attachments'] = isset($data['disable_attachments']) ? $data['disable_attachments'] : null;
        $this->container['disable_text_signatures'] = isset($data['disable_text_signatures']) ? $data['disable_text_signatures'] : null;
        $this->container['disable_text'] = isset($data['disable_text']) ? $data['disable_text'] : null;
        $this->container['disable_date'] = isset($data['disable_date']) ? $data['disable_date'] : null;
        $this->container['disable_emails'] = isset($data['disable_emails']) ? $data['disable_emails'] : null;
        $this->container['disable_upload_signatures'] = isset($data['disable_upload_signatures']) ? $data['disable_upload_signatures'] : null;
        $this->container['disable_blockchain_proof'] = isset($data['disable_blockchain_proof']) ? $data['disable_blockchain_proof'] : null;
        $this->container['text_message_verification_locked'] = isset($data['text_message_verification_locked']) ? $data['text_message_verification_locked'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['who'] = isset($data['who']) ? $data['who'] : null;
        $this->container['send_reminders'] = isset($data['send_reminders']) ? $data['send_reminders'] : null;
        $this->container['signers'] = isset($data['signers']) ? $data['signers'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['from_email_name']) && (mb_strlen($this->container['from_email_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_email_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['prepare_url']) && (mb_strlen($this->container['prepare_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'prepare_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['redirect_url']) && (mb_strlen($this->container['redirect_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'redirect_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['redirect_url_declined']) && (mb_strlen($this->container['redirect_url_declined']) < 1)) {
            $invalidProperties[] = "invalid value for 'redirect_url_declined', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) < 1)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['message']) && (mb_strlen($this->container['message']) < 1)) {
            $invalidProperties[] = "invalid value for 'message', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getWhoAllowableValues();
        if (!is_null($this->container['who']) && !in_array($this->container['who'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'who', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_email
     *
     * @return string
     */
    public function getFromEmail()
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string $from_email Email of user sending the SignRequest (must be a validated email)
     *
     * @return $this
     */
    public function setFromEmail($from_email)
    {
        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets from_email_name
     *
     * @return string
     */
    public function getFromEmailName()
    {
        return $this->container['from_email_name'];
    }

    /**
     * Sets from_email_name
     *
     * @param string $from_email_name Name to be used in the `From` email header, e.g. `{from_email_name} <no-reply@signrequest.com>`
     *
     * @return $this
     */
    public function setFromEmailName($from_email_name)
    {

        if (!is_null($from_email_name) && (mb_strlen($from_email_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $from_email_name when calling DocumentSignrequest., must be bigger than or equal to 1.');
        }

        $this->container['from_email_name'] = $from_email_name;

        return $this;
    }

    /**
     * Gets is_being_prepared
     *
     * @return bool
     */
    public function getIsBeingPrepared()
    {
        return $this->container['is_being_prepared'];
    }

    /**
     * Sets is_being_prepared
     *
     * @param bool $is_being_prepared Have the sender of a SignRequest prepare the document before sending the request out, see: [prepare using the web interface](#section/Preparing-a-document/Prepare-using-the-web-interface)
     *
     * @return $this
     */
    public function setIsBeingPrepared($is_being_prepared)
    {
        $this->container['is_being_prepared'] = $is_being_prepared;

        return $this;
    }

    /**
     * Gets prepare_url
     *
     * @return string
     */
    public function getPrepareUrl()
    {
        return $this->container['prepare_url'];
    }

    /**
     * Sets prepare_url
     *
     * @param string $prepare_url prepare_url
     *
     * @return $this
     */
    public function setPrepareUrl($prepare_url)
    {

        if (!is_null($prepare_url) && (mb_strlen($prepare_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $prepare_url when calling DocumentSignrequest., must be bigger than or equal to 1.');
        }

        $this->container['prepare_url'] = $prepare_url;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url URL at which SignRequest will redirect to when a document is signed
     *
     * @return $this
     */
    public function setRedirectUrl($redirect_url)
    {

        if (!is_null($redirect_url) && (mb_strlen($redirect_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $redirect_url when calling DocumentSignrequest., must be bigger than or equal to 1.');
        }

        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets redirect_url_declined
     *
     * @return string
     */
    public function getRedirectUrlDeclined()
    {
        return $this->container['redirect_url_declined'];
    }

    /**
     * Sets redirect_url_declined
     *
     * @param string $redirect_url_declined URL at which SignRequest will redirect to when a document is declined
     *
     * @return $this
     */
    public function setRedirectUrlDeclined($redirect_url_declined)
    {

        if (!is_null($redirect_url_declined) && (mb_strlen($redirect_url_declined) < 1)) {
            throw new \InvalidArgumentException('invalid length for $redirect_url_declined when calling DocumentSignrequest., must be bigger than or equal to 1.');
        }

        $this->container['redirect_url_declined'] = $redirect_url_declined;

        return $this;
    }

    /**
     * Gets required_attachments
     *
     * @return \SignRequest\Model\RequiredAttachment[]
     */
    public function getRequiredAttachments()
    {
        return $this->container['required_attachments'];
    }

    /**
     * Sets required_attachments
     *
     * @param \SignRequest\Model\RequiredAttachment[] $required_attachments required_attachments
     *
     * @return $this
     */
    public function setRequiredAttachments($required_attachments)
    {
        $this->container['required_attachments'] = $required_attachments;

        return $this;
    }

    /**
     * Gets disable_attachments
     *
     * @return bool
     */
    public function getDisableAttachments()
    {
        return $this->container['disable_attachments'];
    }

    /**
     * Sets disable_attachments
     *
     * @param bool $disable_attachments Disable uploading/adding of attachments
     *
     * @return $this
     */
    public function setDisableAttachments($disable_attachments)
    {
        $this->container['disable_attachments'] = $disable_attachments;

        return $this;
    }

    /**
     * Gets disable_text_signatures
     *
     * @return bool
     */
    public function getDisableTextSignatures()
    {
        return $this->container['disable_text_signatures'];
    }

    /**
     * Sets disable_text_signatures
     *
     * @param bool $disable_text_signatures Disable usage of signatures generated by typing (text)
     *
     * @return $this
     */
    public function setDisableTextSignatures($disable_text_signatures)
    {
        $this->container['disable_text_signatures'] = $disable_text_signatures;

        return $this;
    }

    /**
     * Gets disable_text
     *
     * @return bool
     */
    public function getDisableText()
    {
        return $this->container['disable_text'];
    }

    /**
     * Sets disable_text
     *
     * @param bool $disable_text Disable adding of text
     *
     * @return $this
     */
    public function setDisableText($disable_text)
    {
        $this->container['disable_text'] = $disable_text;

        return $this;
    }

    /**
     * Gets disable_date
     *
     * @return bool
     */
    public function getDisableDate()
    {
        return $this->container['disable_date'];
    }

    /**
     * Sets disable_date
     *
     * @param bool $disable_date Disable adding of dates
     *
     * @return $this
     */
    public function setDisableDate($disable_date)
    {
        $this->container['disable_date'] = $disable_date;

        return $this;
    }

    /**
     * Gets disable_emails
     *
     * @return bool
     */
    public function getDisableEmails()
    {
        return $this->container['disable_emails'];
    }

    /**
     * Sets disable_emails
     *
     * @param bool $disable_emails Disable all SignRequest status emails as well as the email that contains the signed documents
     *
     * @return $this
     */
    public function setDisableEmails($disable_emails)
    {
        $this->container['disable_emails'] = $disable_emails;

        return $this;
    }

    /**
     * Gets disable_upload_signatures
     *
     * @return bool
     */
    public function getDisableUploadSignatures()
    {
        return $this->container['disable_upload_signatures'];
    }

    /**
     * Sets disable_upload_signatures
     *
     * @param bool $disable_upload_signatures Disable usage of uploaded signatures (images)
     *
     * @return $this
     */
    public function setDisableUploadSignatures($disable_upload_signatures)
    {
        $this->container['disable_upload_signatures'] = $disable_upload_signatures;

        return $this;
    }

    /**
     * Gets disable_blockchain_proof
     *
     * @return bool
     */
    public function getDisableBlockchainProof()
    {
        return $this->container['disable_blockchain_proof'];
    }

    /**
     * Sets disable_blockchain_proof
     *
     * @param bool $disable_blockchain_proof Disables storing timestamp proof hashes in blockchain integrations.
     *
     * @return $this
     */
    public function setDisableBlockchainProof($disable_blockchain_proof)
    {
        $this->container['disable_blockchain_proof'] = $disable_blockchain_proof;

        return $this;
    }

    /**
     * Gets text_message_verification_locked
     *
     * @return bool
     */
    public function getTextMessageVerificationLocked()
    {
        return $this->container['text_message_verification_locked'];
    }

    /**
     * Sets text_message_verification_locked
     *
     * @param bool $text_message_verification_locked When true a text message verification is needed before the signer can see the document
     *
     * @return $this
     */
    public function setTextMessageVerificationLocked($text_message_verification_locked)
    {
        $this->container['text_message_verification_locked'] = $text_message_verification_locked;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of SignRequest email
     *
     * @return $this
     */
    public function setSubject($subject)
    {

        if (!is_null($subject) && (mb_strlen($subject) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling DocumentSignrequest., must be bigger than or equal to 1.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Message to include in SignRequest email, may contain the following html tags: `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`
     *
     * @return $this
     */
    public function setMessage($message)
    {

        if (!is_null($message) && (mb_strlen($message) < 1)) {
            throw new \InvalidArgumentException('invalid length for $message when calling DocumentSignrequest., must be bigger than or equal to 1.');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets who
     *
     * @return string
     */
    public function getWho()
    {
        return $this->container['who'];
    }

    /**
     * Sets who
     *
     * @param string $who `m`: only me, `mo`: me and others, `o`: only others
     *
     * @return $this
     */
    public function setWho($who)
    {
        $allowedValues = $this->getWhoAllowableValues();
        if (!is_null($who) && !in_array($who, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'who', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who'] = $who;

        return $this;
    }

    /**
     * Gets send_reminders
     *
     * @return bool
     */
    public function getSendReminders()
    {
        return $this->container['send_reminders'];
    }

    /**
     * Sets send_reminders
     *
     * @param bool $send_reminders Automatically remind signers to sign a document, see: [automatic reminders](#section/Working-with-a-SignRequest/Automatic-reminders)
     *
     * @return $this
     */
    public function setSendReminders($send_reminders)
    {
        $this->container['send_reminders'] = $send_reminders;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \SignRequest\Model\Signer[]
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \SignRequest\Model\Signer[] $signers signers
     *
     * @return $this
     */
    public function setSigners($signers)
    {
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling DocumentSignrequest., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


