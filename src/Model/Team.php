<?php
/**
 * Team
 *
 * PHP version 5
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SignRequest API
 *
 * API for SignRequest.com
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SignRequest\Model;

use \ArrayAccess;
use \SignRequest\ObjectSerializer;

/**
 * Team Class Doc Comment
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Team implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Team';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'subdomain' => 'string',
        'url' => 'string',
        'logo' => 'string',
        'phone' => 'string',
        'primary_color' => 'string',
        'events_callback_url' => 'string',
        'members' => '\SignRequest\Model\InlineTeamMember[]',
        'delete_after' => '\DateTime',
        'sandbox' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'subdomain' => 'slug',
        'url' => 'uri',
        'logo' => 'uri',
        'phone' => null,
        'primary_color' => null,
        'events_callback_url' => 'uri',
        'members' => null,
        'delete_after' => 'date-time',
        'sandbox' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'subdomain' => 'subdomain',
        'url' => 'url',
        'logo' => 'logo',
        'phone' => 'phone',
        'primary_color' => 'primary_color',
        'events_callback_url' => 'events_callback_url',
        'members' => 'members',
        'delete_after' => 'delete_after',
        'sandbox' => 'sandbox'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'subdomain' => 'setSubdomain',
        'url' => 'setUrl',
        'logo' => 'setLogo',
        'phone' => 'setPhone',
        'primary_color' => 'setPrimaryColor',
        'events_callback_url' => 'setEventsCallbackUrl',
        'members' => 'setMembers',
        'delete_after' => 'setDeleteAfter',
        'sandbox' => 'setSandbox'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'subdomain' => 'getSubdomain',
        'url' => 'getUrl',
        'logo' => 'getLogo',
        'phone' => 'getPhone',
        'primary_color' => 'getPrimaryColor',
        'events_callback_url' => 'getEventsCallbackUrl',
        'members' => 'getMembers',
        'delete_after' => 'getDeleteAfter',
        'sandbox' => 'getSandbox'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subdomain'] = isset($data['subdomain']) ? $data['subdomain'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['primary_color'] = isset($data['primary_color']) ? $data['primary_color'] : null;
        $this->container['events_callback_url'] = isset($data['events_callback_url']) ? $data['events_callback_url'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
        $this->container['delete_after'] = isset($data['delete_after']) ? $data['delete_after'] : null;
        $this->container['sandbox'] = isset($data['sandbox']) ? $data['sandbox'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['subdomain'] === null) {
            $invalidProperties[] = "'subdomain' can't be null";
        }
        if ((mb_strlen($this->container['subdomain']) > 100)) {
            $invalidProperties[] = "invalid value for 'subdomain', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['subdomain']) < 1)) {
            $invalidProperties[] = "invalid value for 'subdomain', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 100)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['primary_color']) && (mb_strlen($this->container['primary_color']) > 100)) {
            $invalidProperties[] = "invalid value for 'primary_color', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['primary_color']) && !preg_match("/^[#a-zA-Z0-9]+$/", $this->container['primary_color'])) {
            $invalidProperties[] = "invalid value for 'primary_color', must be conform to the pattern /^[#a-zA-Z0-9]+$/.";
        }

        if (!is_null($this->container['events_callback_url']) && (mb_strlen($this->container['events_callback_url']) > 2100)) {
            $invalidProperties[] = "invalid value for 'events_callback_url', the character length must be smaller than or equal to 2100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Team., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Team., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string $subdomain subdomain
     *
     * @return $this
     */
    public function setSubdomain($subdomain)
    {
        if ((mb_strlen($subdomain) > 100)) {
            throw new \InvalidArgumentException('invalid length for $subdomain when calling Team., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($subdomain) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subdomain when calling Team., must be bigger than or equal to 1.');
        }

        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 100)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Team., must be smaller than or equal to 100.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets primary_color
     *
     * @return string
     */
    public function getPrimaryColor()
    {
        return $this->container['primary_color'];
    }

    /**
     * Sets primary_color
     *
     * @param string $primary_color primary_color
     *
     * @return $this
     */
    public function setPrimaryColor($primary_color)
    {
        if (!is_null($primary_color) && (mb_strlen($primary_color) > 100)) {
            throw new \InvalidArgumentException('invalid length for $primary_color when calling Team., must be smaller than or equal to 100.');
        }
        if (!is_null($primary_color) && (!preg_match("/^[#a-zA-Z0-9]+$/", $primary_color))) {
            throw new \InvalidArgumentException("invalid value for $primary_color when calling Team., must conform to the pattern /^[#a-zA-Z0-9]+$/.");
        }

        $this->container['primary_color'] = $primary_color;

        return $this;
    }

    /**
     * Gets events_callback_url
     *
     * @return string
     */
    public function getEventsCallbackUrl()
    {
        return $this->container['events_callback_url'];
    }

    /**
     * Sets events_callback_url
     *
     * @param string $events_callback_url events_callback_url
     *
     * @return $this
     */
    public function setEventsCallbackUrl($events_callback_url)
    {
        if (!is_null($events_callback_url) && (mb_strlen($events_callback_url) > 2100)) {
            throw new \InvalidArgumentException('invalid length for $events_callback_url when calling Team., must be smaller than or equal to 2100.');
        }

        $this->container['events_callback_url'] = $events_callback_url;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \SignRequest\Model\InlineTeamMember[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \SignRequest\Model\InlineTeamMember[] $members members
     *
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets delete_after
     *
     * @return \DateTime
     */
    public function getDeleteAfter()
    {
        return $this->container['delete_after'];
    }

    /**
     * Sets delete_after
     *
     * @param \DateTime $delete_after When filled this team will be deleted after this date
     *
     * @return $this
     */
    public function setDeleteAfter($delete_after)
    {
        $this->container['delete_after'] = $delete_after;

        return $this;
    }

    /**
     * Gets sandbox
     *
     * @return bool
     */
    public function getSandbox()
    {
        return $this->container['sandbox'];
    }

    /**
     * Sets sandbox
     *
     * @param bool $sandbox Indicates whether team is in Sandbox mode
     *
     * @return $this
     */
    public function setSandbox($sandbox)
    {
        $this->container['sandbox'] = $sandbox;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


