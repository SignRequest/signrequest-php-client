<?php
/**
 * SignRequestQuickCreate
 *
 * PHP version 5
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SignRequest API
 *
 * API for SignRequest.com
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SignRequest\Model;

use \ArrayAccess;
use \SignRequest\ObjectSerializer;

/**
 * SignRequestQuickCreate Class Doc Comment
 *
 * @category Class
 * @package  SignRequest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignRequestQuickCreate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SignRequestQuickCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_email' => 'string',
        'from_email_name' => 'string',
        'is_being_prepared' => 'bool',
        'prepare_url' => 'string',
        'redirect_url' => 'string',
        'redirect_url_declined' => 'string',
        'required_attachments' => '\SignRequest\Model\RequiredAttachment[]',
        'disable_attachments' => 'bool',
        'disable_text_signatures' => 'bool',
        'disable_text' => 'bool',
        'disable_date' => 'bool',
        'disable_emails' => 'bool',
        'disable_upload_signatures' => 'bool',
        'disable_blockchain_proof' => 'bool',
        'text_message_verification_locked' => 'bool',
        'subject' => 'string',
        'message' => 'string',
        'who' => 'string',
        'send_reminders' => 'bool',
        'signers' => '\SignRequest\Model\Signer[]',
        'uuid' => 'string',
        'url' => 'string',
        'document' => 'string',
        'integration' => 'string',
        'integration_data' => 'object',
        'name' => 'string',
        'external_id' => 'string',
        'frontend_id' => 'string',
        'file' => 'string',
        'file_from_url' => 'string',
        'events_callback_url' => 'string',
        'file_from_content' => 'string',
        'file_from_content_name' => 'string',
        'template' => 'string',
        'prefill_tags' => '\SignRequest\Model\InlinePrefillTags[]',
        'integrations' => '\SignRequest\Model\InlineIntegrationData[]',
        'file_from_sf' => '\SignRequest\Model\FileFromSf',
        'auto_delete_days' => 'int',
        'auto_expire_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_email' => 'email',
        'from_email_name' => null,
        'is_being_prepared' => null,
        'prepare_url' => 'uri',
        'redirect_url' => 'uri',
        'redirect_url_declined' => 'uri',
        'required_attachments' => null,
        'disable_attachments' => null,
        'disable_text_signatures' => null,
        'disable_text' => null,
        'disable_date' => null,
        'disable_emails' => null,
        'disable_upload_signatures' => null,
        'disable_blockchain_proof' => null,
        'text_message_verification_locked' => null,
        'subject' => null,
        'message' => null,
        'who' => null,
        'send_reminders' => null,
        'signers' => null,
        'uuid' => null,
        'url' => 'uri',
        'document' => 'uri',
        'integration' => null,
        'integration_data' => null,
        'name' => null,
        'external_id' => null,
        'frontend_id' => null,
        'file' => 'uri',
        'file_from_url' => 'uri',
        'events_callback_url' => 'uri',
        'file_from_content' => null,
        'file_from_content_name' => null,
        'template' => 'uri',
        'prefill_tags' => null,
        'integrations' => null,
        'file_from_sf' => null,
        'auto_delete_days' => null,
        'auto_expire_days' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_email' => 'from_email',
        'from_email_name' => 'from_email_name',
        'is_being_prepared' => 'is_being_prepared',
        'prepare_url' => 'prepare_url',
        'redirect_url' => 'redirect_url',
        'redirect_url_declined' => 'redirect_url_declined',
        'required_attachments' => 'required_attachments',
        'disable_attachments' => 'disable_attachments',
        'disable_text_signatures' => 'disable_text_signatures',
        'disable_text' => 'disable_text',
        'disable_date' => 'disable_date',
        'disable_emails' => 'disable_emails',
        'disable_upload_signatures' => 'disable_upload_signatures',
        'disable_blockchain_proof' => 'disable_blockchain_proof',
        'text_message_verification_locked' => 'text_message_verification_locked',
        'subject' => 'subject',
        'message' => 'message',
        'who' => 'who',
        'send_reminders' => 'send_reminders',
        'signers' => 'signers',
        'uuid' => 'uuid',
        'url' => 'url',
        'document' => 'document',
        'integration' => 'integration',
        'integration_data' => 'integration_data',
        'name' => 'name',
        'external_id' => 'external_id',
        'frontend_id' => 'frontend_id',
        'file' => 'file',
        'file_from_url' => 'file_from_url',
        'events_callback_url' => 'events_callback_url',
        'file_from_content' => 'file_from_content',
        'file_from_content_name' => 'file_from_content_name',
        'template' => 'template',
        'prefill_tags' => 'prefill_tags',
        'integrations' => 'integrations',
        'file_from_sf' => 'file_from_sf',
        'auto_delete_days' => 'auto_delete_days',
        'auto_expire_days' => 'auto_expire_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_email' => 'setFromEmail',
        'from_email_name' => 'setFromEmailName',
        'is_being_prepared' => 'setIsBeingPrepared',
        'prepare_url' => 'setPrepareUrl',
        'redirect_url' => 'setRedirectUrl',
        'redirect_url_declined' => 'setRedirectUrlDeclined',
        'required_attachments' => 'setRequiredAttachments',
        'disable_attachments' => 'setDisableAttachments',
        'disable_text_signatures' => 'setDisableTextSignatures',
        'disable_text' => 'setDisableText',
        'disable_date' => 'setDisableDate',
        'disable_emails' => 'setDisableEmails',
        'disable_upload_signatures' => 'setDisableUploadSignatures',
        'disable_blockchain_proof' => 'setDisableBlockchainProof',
        'text_message_verification_locked' => 'setTextMessageVerificationLocked',
        'subject' => 'setSubject',
        'message' => 'setMessage',
        'who' => 'setWho',
        'send_reminders' => 'setSendReminders',
        'signers' => 'setSigners',
        'uuid' => 'setUuid',
        'url' => 'setUrl',
        'document' => 'setDocument',
        'integration' => 'setIntegration',
        'integration_data' => 'setIntegrationData',
        'name' => 'setName',
        'external_id' => 'setExternalId',
        'frontend_id' => 'setFrontendId',
        'file' => 'setFile',
        'file_from_url' => 'setFileFromUrl',
        'events_callback_url' => 'setEventsCallbackUrl',
        'file_from_content' => 'setFileFromContent',
        'file_from_content_name' => 'setFileFromContentName',
        'template' => 'setTemplate',
        'prefill_tags' => 'setPrefillTags',
        'integrations' => 'setIntegrations',
        'file_from_sf' => 'setFileFromSf',
        'auto_delete_days' => 'setAutoDeleteDays',
        'auto_expire_days' => 'setAutoExpireDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_email' => 'getFromEmail',
        'from_email_name' => 'getFromEmailName',
        'is_being_prepared' => 'getIsBeingPrepared',
        'prepare_url' => 'getPrepareUrl',
        'redirect_url' => 'getRedirectUrl',
        'redirect_url_declined' => 'getRedirectUrlDeclined',
        'required_attachments' => 'getRequiredAttachments',
        'disable_attachments' => 'getDisableAttachments',
        'disable_text_signatures' => 'getDisableTextSignatures',
        'disable_text' => 'getDisableText',
        'disable_date' => 'getDisableDate',
        'disable_emails' => 'getDisableEmails',
        'disable_upload_signatures' => 'getDisableUploadSignatures',
        'disable_blockchain_proof' => 'getDisableBlockchainProof',
        'text_message_verification_locked' => 'getTextMessageVerificationLocked',
        'subject' => 'getSubject',
        'message' => 'getMessage',
        'who' => 'getWho',
        'send_reminders' => 'getSendReminders',
        'signers' => 'getSigners',
        'uuid' => 'getUuid',
        'url' => 'getUrl',
        'document' => 'getDocument',
        'integration' => 'getIntegration',
        'integration_data' => 'getIntegrationData',
        'name' => 'getName',
        'external_id' => 'getExternalId',
        'frontend_id' => 'getFrontendId',
        'file' => 'getFile',
        'file_from_url' => 'getFileFromUrl',
        'events_callback_url' => 'getEventsCallbackUrl',
        'file_from_content' => 'getFileFromContent',
        'file_from_content_name' => 'getFileFromContentName',
        'template' => 'getTemplate',
        'prefill_tags' => 'getPrefillTags',
        'integrations' => 'getIntegrations',
        'file_from_sf' => 'getFileFromSf',
        'auto_delete_days' => 'getAutoDeleteDays',
        'auto_expire_days' => 'getAutoExpireDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WHO_M = 'm';
    const WHO_MO = 'mo';
    const WHO_O = 'o';
    const INTEGRATION_MFILES = 'mfiles';
    const INTEGRATION_SALESFORCE = 'salesforce';
    const INTEGRATION_FORMDESK = 'formdesk';
    const INTEGRATION_ZAPIER = 'zapier';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoAllowableValues()
    {
        return [
            self::WHO_M,
            self::WHO_MO,
            self::WHO_O,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntegrationAllowableValues()
    {
        return [
            self::INTEGRATION_MFILES,
            self::INTEGRATION_SALESFORCE,
            self::INTEGRATION_FORMDESK,
            self::INTEGRATION_ZAPIER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_email'] = isset($data['from_email']) ? $data['from_email'] : null;
        $this->container['from_email_name'] = isset($data['from_email_name']) ? $data['from_email_name'] : null;
        $this->container['is_being_prepared'] = isset($data['is_being_prepared']) ? $data['is_being_prepared'] : null;
        $this->container['prepare_url'] = isset($data['prepare_url']) ? $data['prepare_url'] : null;
        $this->container['redirect_url'] = isset($data['redirect_url']) ? $data['redirect_url'] : null;
        $this->container['redirect_url_declined'] = isset($data['redirect_url_declined']) ? $data['redirect_url_declined'] : null;
        $this->container['required_attachments'] = isset($data['required_attachments']) ? $data['required_attachments'] : null;
        $this->container['disable_attachments'] = isset($data['disable_attachments']) ? $data['disable_attachments'] : null;
        $this->container['disable_text_signatures'] = isset($data['disable_text_signatures']) ? $data['disable_text_signatures'] : null;
        $this->container['disable_text'] = isset($data['disable_text']) ? $data['disable_text'] : null;
        $this->container['disable_date'] = isset($data['disable_date']) ? $data['disable_date'] : null;
        $this->container['disable_emails'] = isset($data['disable_emails']) ? $data['disable_emails'] : null;
        $this->container['disable_upload_signatures'] = isset($data['disable_upload_signatures']) ? $data['disable_upload_signatures'] : null;
        $this->container['disable_blockchain_proof'] = isset($data['disable_blockchain_proof']) ? $data['disable_blockchain_proof'] : null;
        $this->container['text_message_verification_locked'] = isset($data['text_message_verification_locked']) ? $data['text_message_verification_locked'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['who'] = isset($data['who']) ? $data['who'] : 'o';
        $this->container['send_reminders'] = isset($data['send_reminders']) ? $data['send_reminders'] : null;
        $this->container['signers'] = isset($data['signers']) ? $data['signers'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['integration'] = isset($data['integration']) ? $data['integration'] : null;
        $this->container['integration_data'] = isset($data['integration_data']) ? $data['integration_data'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['frontend_id'] = isset($data['frontend_id']) ? $data['frontend_id'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['file_from_url'] = isset($data['file_from_url']) ? $data['file_from_url'] : null;
        $this->container['events_callback_url'] = isset($data['events_callback_url']) ? $data['events_callback_url'] : null;
        $this->container['file_from_content'] = isset($data['file_from_content']) ? $data['file_from_content'] : null;
        $this->container['file_from_content_name'] = isset($data['file_from_content_name']) ? $data['file_from_content_name'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['prefill_tags'] = isset($data['prefill_tags']) ? $data['prefill_tags'] : null;
        $this->container['integrations'] = isset($data['integrations']) ? $data['integrations'] : null;
        $this->container['file_from_sf'] = isset($data['file_from_sf']) ? $data['file_from_sf'] : null;
        $this->container['auto_delete_days'] = isset($data['auto_delete_days']) ? $data['auto_delete_days'] : null;
        $this->container['auto_expire_days'] = isset($data['auto_expire_days']) ? $data['auto_expire_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['from_email']) && (mb_strlen($this->container['from_email']) > 255)) {
            $invalidProperties[] = "invalid value for 'from_email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['from_email']) && (mb_strlen($this->container['from_email']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_email', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['from_email_name']) && (mb_strlen($this->container['from_email_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'from_email_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['prepare_url']) && (mb_strlen($this->container['prepare_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'prepare_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['redirect_url']) && (mb_strlen($this->container['redirect_url']) > 2100)) {
            $invalidProperties[] = "invalid value for 'redirect_url', the character length must be smaller than or equal to 2100.";
        }

        if (!is_null($this->container['redirect_url_declined']) && (mb_strlen($this->container['redirect_url_declined']) > 2100)) {
            $invalidProperties[] = "invalid value for 'redirect_url_declined', the character length must be smaller than or equal to 2100.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 512)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 512.";
        }

        $allowedValues = $this->getWhoAllowableValues();
        if (!is_null($this->container['who']) && !in_array($this->container['who'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'who', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['signers'] === null) {
            $invalidProperties[] = "'signers' can't be null";
        }
        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getIntegrationAllowableValues();
        if (!is_null($this->container['integration']) && !in_array($this->container['integration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'integration', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['frontend_id']) && (mb_strlen($this->container['frontend_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'frontend_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['file_from_url']) && (mb_strlen($this->container['file_from_url']) > 2100)) {
            $invalidProperties[] = "invalid value for 'file_from_url', the character length must be smaller than or equal to 2100.";
        }

        if (!is_null($this->container['events_callback_url']) && (mb_strlen($this->container['events_callback_url']) > 2100)) {
            $invalidProperties[] = "invalid value for 'events_callback_url', the character length must be smaller than or equal to 2100.";
        }

        if (!is_null($this->container['auto_delete_days']) && ($this->container['auto_delete_days'] > 730)) {
            $invalidProperties[] = "invalid value for 'auto_delete_days', must be smaller than or equal to 730.";
        }

        if (!is_null($this->container['auto_delete_days']) && ($this->container['auto_delete_days'] < 1)) {
            $invalidProperties[] = "invalid value for 'auto_delete_days', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['auto_expire_days']) && ($this->container['auto_expire_days'] > 730)) {
            $invalidProperties[] = "invalid value for 'auto_expire_days', must be smaller than or equal to 730.";
        }

        if (!is_null($this->container['auto_expire_days']) && ($this->container['auto_expire_days'] < 1)) {
            $invalidProperties[] = "invalid value for 'auto_expire_days', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_email
     *
     * @return string
     */
    public function getFromEmail()
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string $from_email Email of user sending the SignRequest (must be a validated email)
     *
     * @return $this
     */
    public function setFromEmail($from_email)
    {
        if (!is_null($from_email) && (mb_strlen($from_email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $from_email when calling SignRequestQuickCreate., must be smaller than or equal to 255.');
        }
        if (!is_null($from_email) && (mb_strlen($from_email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $from_email when calling SignRequestQuickCreate., must be bigger than or equal to 1.');
        }

        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets from_email_name
     *
     * @return string
     */
    public function getFromEmailName()
    {
        return $this->container['from_email_name'];
    }

    /**
     * Sets from_email_name
     *
     * @param string $from_email_name Name to be used in the `From` email header, e.g. `{from_email_name} <no-reply@signrequest.com>`
     *
     * @return $this
     */
    public function setFromEmailName($from_email_name)
    {
        if (!is_null($from_email_name) && (mb_strlen($from_email_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $from_email_name when calling SignRequestQuickCreate., must be smaller than or equal to 255.');
        }

        $this->container['from_email_name'] = $from_email_name;

        return $this;
    }

    /**
     * Gets is_being_prepared
     *
     * @return bool
     */
    public function getIsBeingPrepared()
    {
        return $this->container['is_being_prepared'];
    }

    /**
     * Sets is_being_prepared
     *
     * @param bool $is_being_prepared Have the sender of a SignRequest prepare the document before sending the request out, see: [prepare using the web interface](#section/Preparing-a-document/Prepare-using-the-web-interface)
     *
     * @return $this
     */
    public function setIsBeingPrepared($is_being_prepared)
    {
        $this->container['is_being_prepared'] = $is_being_prepared;

        return $this;
    }

    /**
     * Gets prepare_url
     *
     * @return string
     */
    public function getPrepareUrl()
    {
        return $this->container['prepare_url'];
    }

    /**
     * Sets prepare_url
     *
     * @param string $prepare_url prepare_url
     *
     * @return $this
     */
    public function setPrepareUrl($prepare_url)
    {

        if (!is_null($prepare_url) && (mb_strlen($prepare_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $prepare_url when calling SignRequestQuickCreate., must be bigger than or equal to 1.');
        }

        $this->container['prepare_url'] = $prepare_url;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url URL at which SignRequest will redirect to when a document is signed
     *
     * @return $this
     */
    public function setRedirectUrl($redirect_url)
    {
        if (!is_null($redirect_url) && (mb_strlen($redirect_url) > 2100)) {
            throw new \InvalidArgumentException('invalid length for $redirect_url when calling SignRequestQuickCreate., must be smaller than or equal to 2100.');
        }

        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets redirect_url_declined
     *
     * @return string
     */
    public function getRedirectUrlDeclined()
    {
        return $this->container['redirect_url_declined'];
    }

    /**
     * Sets redirect_url_declined
     *
     * @param string $redirect_url_declined URL at which SignRequest will redirect to when a document is declined
     *
     * @return $this
     */
    public function setRedirectUrlDeclined($redirect_url_declined)
    {
        if (!is_null($redirect_url_declined) && (mb_strlen($redirect_url_declined) > 2100)) {
            throw new \InvalidArgumentException('invalid length for $redirect_url_declined when calling SignRequestQuickCreate., must be smaller than or equal to 2100.');
        }

        $this->container['redirect_url_declined'] = $redirect_url_declined;

        return $this;
    }

    /**
     * Gets required_attachments
     *
     * @return \SignRequest\Model\RequiredAttachment[]
     */
    public function getRequiredAttachments()
    {
        return $this->container['required_attachments'];
    }

    /**
     * Sets required_attachments
     *
     * @param \SignRequest\Model\RequiredAttachment[] $required_attachments Attachments that signers are required to upload
     *
     * @return $this
     */
    public function setRequiredAttachments($required_attachments)
    {
        $this->container['required_attachments'] = $required_attachments;

        return $this;
    }

    /**
     * Gets disable_attachments
     *
     * @return bool
     */
    public function getDisableAttachments()
    {
        return $this->container['disable_attachments'];
    }

    /**
     * Sets disable_attachments
     *
     * @param bool $disable_attachments Disable uploading/adding of attachments
     *
     * @return $this
     */
    public function setDisableAttachments($disable_attachments)
    {
        $this->container['disable_attachments'] = $disable_attachments;

        return $this;
    }

    /**
     * Gets disable_text_signatures
     *
     * @return bool
     */
    public function getDisableTextSignatures()
    {
        return $this->container['disable_text_signatures'];
    }

    /**
     * Sets disable_text_signatures
     *
     * @param bool $disable_text_signatures Disable usage of signatures generated by typing (text)
     *
     * @return $this
     */
    public function setDisableTextSignatures($disable_text_signatures)
    {
        $this->container['disable_text_signatures'] = $disable_text_signatures;

        return $this;
    }

    /**
     * Gets disable_text
     *
     * @return bool
     */
    public function getDisableText()
    {
        return $this->container['disable_text'];
    }

    /**
     * Sets disable_text
     *
     * @param bool $disable_text Disable adding of text
     *
     * @return $this
     */
    public function setDisableText($disable_text)
    {
        $this->container['disable_text'] = $disable_text;

        return $this;
    }

    /**
     * Gets disable_date
     *
     * @return bool
     */
    public function getDisableDate()
    {
        return $this->container['disable_date'];
    }

    /**
     * Sets disable_date
     *
     * @param bool $disable_date Disable adding of dates
     *
     * @return $this
     */
    public function setDisableDate($disable_date)
    {
        $this->container['disable_date'] = $disable_date;

        return $this;
    }

    /**
     * Gets disable_emails
     *
     * @return bool
     */
    public function getDisableEmails()
    {
        return $this->container['disable_emails'];
    }

    /**
     * Sets disable_emails
     *
     * @param bool $disable_emails Disable all SignRequest status emails as well as the email that contains the signed documents
     *
     * @return $this
     */
    public function setDisableEmails($disable_emails)
    {
        $this->container['disable_emails'] = $disable_emails;

        return $this;
    }

    /**
     * Gets disable_upload_signatures
     *
     * @return bool
     */
    public function getDisableUploadSignatures()
    {
        return $this->container['disable_upload_signatures'];
    }

    /**
     * Sets disable_upload_signatures
     *
     * @param bool $disable_upload_signatures Disable usage of uploaded signatures (images)
     *
     * @return $this
     */
    public function setDisableUploadSignatures($disable_upload_signatures)
    {
        $this->container['disable_upload_signatures'] = $disable_upload_signatures;

        return $this;
    }

    /**
     * Gets disable_blockchain_proof
     *
     * @return bool
     */
    public function getDisableBlockchainProof()
    {
        return $this->container['disable_blockchain_proof'];
    }

    /**
     * Sets disable_blockchain_proof
     *
     * @param bool $disable_blockchain_proof Disables storing timestamp proof hashes in blockchain integrations.
     *
     * @return $this
     */
    public function setDisableBlockchainProof($disable_blockchain_proof)
    {
        $this->container['disable_blockchain_proof'] = $disable_blockchain_proof;

        return $this;
    }

    /**
     * Gets text_message_verification_locked
     *
     * @return bool
     */
    public function getTextMessageVerificationLocked()
    {
        return $this->container['text_message_verification_locked'];
    }

    /**
     * Sets text_message_verification_locked
     *
     * @param bool $text_message_verification_locked When true a text message verification is needed before the signer can see the document
     *
     * @return $this
     */
    public function setTextMessageVerificationLocked($text_message_verification_locked)
    {
        $this->container['text_message_verification_locked'] = $text_message_verification_locked;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of SignRequest email
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 512)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling SignRequestQuickCreate., must be smaller than or equal to 512.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Message to include in SignRequest email, may contain the following html tags: `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets who
     *
     * @return string
     */
    public function getWho()
    {
        return $this->container['who'];
    }

    /**
     * Sets who
     *
     * @param string $who `m`: only me, `mo`: me and others, `o`: only others
     *
     * @return $this
     */
    public function setWho($who)
    {
        $allowedValues = $this->getWhoAllowableValues();
        if (!is_null($who) && !in_array($who, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'who', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who'] = $who;

        return $this;
    }

    /**
     * Gets send_reminders
     *
     * @return bool
     */
    public function getSendReminders()
    {
        return $this->container['send_reminders'];
    }

    /**
     * Sets send_reminders
     *
     * @param bool $send_reminders Automatically remind signers to sign a document, see: [automatic reminders](#section/Working-with-a-SignRequest/Automatic-reminders)
     *
     * @return $this
     */
    public function setSendReminders($send_reminders)
    {
        $this->container['send_reminders'] = $send_reminders;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \SignRequest\Model\Signer[]
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \SignRequest\Model\Signer[] $signers signers
     *
     * @return $this
     */
    public function setSigners($signers)
    {
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling SignRequestQuickCreate., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param string $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return string
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param string $integration integration
     *
     * @return $this
     */
    public function setIntegration($integration)
    {
        $allowedValues = $this->getIntegrationAllowableValues();
        if (!is_null($integration) && !in_array($integration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'integration', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets integration_data
     *
     * @return object
     */
    public function getIntegrationData()
    {
        return $this->container['integration_data'];
    }

    /**
     * Sets integration_data
     *
     * @param object $integration_data integration_data
     *
     * @return $this
     */
    public function setIntegrationData($integration_data)
    {
        $this->container['integration_data'] = $integration_data;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Defaults to filename, including extension
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SignRequestQuickCreate., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id ID used to reference document in external system
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        if (!is_null($external_id) && (mb_strlen($external_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling SignRequestQuickCreate., must be smaller than or equal to 255.');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets frontend_id
     *
     * @return string
     */
    public function getFrontendId()
    {
        return $this->container['frontend_id'];
    }

    /**
     * Sets frontend_id
     *
     * @param string $frontend_id Shared secret used in conjunction with <a href=\"#section/Frontend-API/SignRequest-js-client-(beta)\">SignRequest-js client</a> to grant user access to a document that's not a member of the document's team
     *
     * @return $this
     */
    public function setFrontendId($frontend_id)
    {
        if (!is_null($frontend_id) && (mb_strlen($frontend_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $frontend_id when calling SignRequestQuickCreate., must be smaller than or equal to 255.');
        }

        $this->container['frontend_id'] = $frontend_id;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file Temporary URL to original file, expires in five minutes
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets file_from_url
     *
     * @return string
     */
    public function getFileFromUrl()
    {
        return $this->container['file_from_url'];
    }

    /**
     * Sets file_from_url
     *
     * @param string $file_from_url Publicly accessible URL of document to be downloaded by SignRequest
     *
     * @return $this
     */
    public function setFileFromUrl($file_from_url)
    {
        if (!is_null($file_from_url) && (mb_strlen($file_from_url) > 2100)) {
            throw new \InvalidArgumentException('invalid length for $file_from_url when calling SignRequestQuickCreate., must be smaller than or equal to 2100.');
        }

        $this->container['file_from_url'] = $file_from_url;

        return $this;
    }

    /**
     * Gets events_callback_url
     *
     * @return string
     */
    public function getEventsCallbackUrl()
    {
        return $this->container['events_callback_url'];
    }

    /**
     * Sets events_callback_url
     *
     * @param string $events_callback_url URL at which to receive [event callbacks](#section/Events/Events-callback) for this document
     *
     * @return $this
     */
    public function setEventsCallbackUrl($events_callback_url)
    {
        if (!is_null($events_callback_url) && (mb_strlen($events_callback_url) > 2100)) {
            throw new \InvalidArgumentException('invalid length for $events_callback_url when calling SignRequestQuickCreate., must be smaller than or equal to 2100.');
        }

        $this->container['events_callback_url'] = $events_callback_url;

        return $this;
    }

    /**
     * Gets file_from_content
     *
     * @return string
     */
    public function getFileFromContent()
    {
        return $this->container['file_from_content'];
    }

    /**
     * Sets file_from_content
     *
     * @param string $file_from_content Base64 encoded document content
     *
     * @return $this
     */
    public function setFileFromContent($file_from_content)
    {
        $this->container['file_from_content'] = $file_from_content;

        return $this;
    }

    /**
     * Gets file_from_content_name
     *
     * @return string
     */
    public function getFileFromContentName()
    {
        return $this->container['file_from_content_name'];
    }

    /**
     * Sets file_from_content_name
     *
     * @param string $file_from_content_name Filename, including extension. Required when using `file_from_content`.
     *
     * @return $this
     */
    public function setFileFromContentName($file_from_content_name)
    {
        $this->container['file_from_content_name'] = $file_from_content_name;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets prefill_tags
     *
     * @return \SignRequest\Model\InlinePrefillTags[]
     */
    public function getPrefillTags()
    {
        return $this->container['prefill_tags'];
    }

    /**
     * Sets prefill_tags
     *
     * @param \SignRequest\Model\InlinePrefillTags[] $prefill_tags Prefill signer input data, see [prefill tags](#section/Preparing-a-document/Prefill-tags-templates)
     *
     * @return $this
     */
    public function setPrefillTags($prefill_tags)
    {
        $this->container['prefill_tags'] = $prefill_tags;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return \SignRequest\Model\InlineIntegrationData[]
     */
    public function getIntegrations()
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param \SignRequest\Model\InlineIntegrationData[] $integrations integrations
     *
     * @return $this
     */
    public function setIntegrations($integrations)
    {
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets file_from_sf
     *
     * @return \SignRequest\Model\FileFromSf
     */
    public function getFileFromSf()
    {
        return $this->container['file_from_sf'];
    }

    /**
     * Sets file_from_sf
     *
     * @param \SignRequest\Model\FileFromSf $file_from_sf file_from_sf
     *
     * @return $this
     */
    public function setFileFromSf($file_from_sf)
    {
        $this->container['file_from_sf'] = $file_from_sf;

        return $this;
    }

    /**
     * Gets auto_delete_days
     *
     * @return int
     */
    public function getAutoDeleteDays()
    {
        return $this->container['auto_delete_days'];
    }

    /**
     * Sets auto_delete_days
     *
     * @param int $auto_delete_days Number of days after which a finished document (signed/cancelled/declined) will be automatically deleted
     *
     * @return $this
     */
    public function setAutoDeleteDays($auto_delete_days)
    {

        if (!is_null($auto_delete_days) && ($auto_delete_days > 730)) {
            throw new \InvalidArgumentException('invalid value for $auto_delete_days when calling SignRequestQuickCreate., must be smaller than or equal to 730.');
        }
        if (!is_null($auto_delete_days) && ($auto_delete_days < 1)) {
            throw new \InvalidArgumentException('invalid value for $auto_delete_days when calling SignRequestQuickCreate., must be bigger than or equal to 1.');
        }

        $this->container['auto_delete_days'] = $auto_delete_days;

        return $this;
    }

    /**
     * Gets auto_expire_days
     *
     * @return int
     */
    public function getAutoExpireDays()
    {
        return $this->container['auto_expire_days'];
    }

    /**
     * Sets auto_expire_days
     *
     * @param int $auto_expire_days Number of days after which a non finished document will be automatically expired
     *
     * @return $this
     */
    public function setAutoExpireDays($auto_expire_days)
    {

        if (!is_null($auto_expire_days) && ($auto_expire_days > 730)) {
            throw new \InvalidArgumentException('invalid value for $auto_expire_days when calling SignRequestQuickCreate., must be smaller than or equal to 730.');
        }
        if (!is_null($auto_expire_days) && ($auto_expire_days < 1)) {
            throw new \InvalidArgumentException('invalid value for $auto_expire_days when calling SignRequestQuickCreate., must be bigger than or equal to 1.');
        }

        $this->container['auto_expire_days'] = $auto_expire_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


